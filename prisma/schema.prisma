
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url     = env("DATABASE_URL")
}
 //Only for signin and registration 
 //User <--> Member (one-to-one)
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  passwordHash String?
  profileComplete Boolean   @default(false)
  role Role @default(MEMBER)
  accounts      Account[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member Member?
}

model Member{
id String @id @default(cuid())
userId String @unique
name String
gender String
dateOFBirth DateTime
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
description String
city String
country String
image String?
user User @relation(fields: [userId],references: [id],onDelete:Cascade)
photos Photo[]
sourceLikes Like[] @relation("source")
targetLikes Like[] @relation("target")
senderMessages    Message[] @relation("sender")
recipientMessages Message[] @relation("recipient")
}
//One Member can have many Photos
// Member<--> Photo (one-to-many)
model Photo{
  id String @id @default(cuid())
  url String
  publicId String?
  isApproved Boolean @default(false)
  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
}
 //For generating token and storing the related data of token and session  
 //User <--> Account (one-to-one)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
//For Kepping track of the Likes between users 
//Member can like many other users <--> Many users can like one user (Many-to-Many) 
model Like {
  sourceUserId String
  sourceMember Member @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)

  targetUserId String
  targetMember Member @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)
  
  //Primary key of this table
  @@id([sourceUserId, targetUserId])
}

//For storing the communication between the sender and reciver
//Message <--> Many (Many-to-Many)
model Message {
  id               String    @id @default(cuid())
  text             String
  created          DateTime  @default(now())
  senderId         String?
  recipientId      String?
  sender           Member?    @relation("sender", fields: [senderId], references: [userId], onDelete: SetNull)
  recipient        Member?    @relation("recipient", fields: [recipientId], references: [userId], onDelete: SetNull)
  dateRead         DateTime?
  senderDeleted    Boolean   @default(false)
  recipientDeleted Boolean   @default(false)
}

//Tokens for validating an Email
model Token {
  id      String    @id @default(cuid())
  email   String
  token   String
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}

//Roles 
enum Role {
  ADMIN
  MEMBER
}